name: pop-omuse

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-pop-omuse
  cancel-in-progress: true

jobs:

  Formatting:
    runs-on: ubuntu-latest
    steps:  
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        ref: main

    - name: Set up JDK
      uses: actions/setup-java@v3.9.0
      with:
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '17'
  
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip' # caching pip dependencies

    - name: install system deps
      run: |
        sudo apt-get install libopenmpi-dev

    - name: Install amuse-devel
      run: |
        git clone https://github.com/amusecode/amuse
        cd amuse
        pip install -e .
  
    - name: Install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version 1.6.0
        poetry config virtualenvs.create "true"
        poetry config virtualenvs.in-project "true"
  
    - name: Install dependencies
      run: |
        cp .github/workflows/support_ci/pyproject.toml ./Submodules/omuse/
        cp .github/workflows/support_ci/setup.py ./Submodules/omuse/
        poetry install --no-interaction --no-root
  
    - name: Formatting with black
      run: poetry run black --check .
  
    - name: Sort import
      run: poetry run isort --check-only --diff .
  
    - name: Lint with flake8
      run: poetry run flake8 --exclude "Submodules, amuse, .venv, .github" .

  build-deps:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        python-version: ['3.9', '3.10']

    runs-on: ${{ matrix.os }}
    name: build-${{ matrix.os }}
    needs: Formatting

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        ref: main

    - name: Set up JDK
      uses: actions/setup-java@v3.9.0
      with:
        distribution: 'zulu' # See 'Supported distributions' for available options
        java-version: '17'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: install system deps [macOS]
      if: runner.os == 'macOS'
      run: |
        brew install openmpi || true
        ln -s /usr/local/bin/gfortran-13 /usr/local/bin/gfortran
        brew install netcdf netcdf-fortran || true

    - name: install system deps [ubuntu]
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libopenmpi-dev
        sudo apt-get install libnetcdf-dev libnetcdff-dev

    - name: Install amuse-devel
      run: |
        echo $(nproc)
        git clone https://github.com/amusecode/amuse
        cd amuse
        pip install -e .
        if [ "${{ matrix.os }}" == 'macos-latest' ]; then \
          sed -i '' "s#.*NETCDF_LIBS.*#NETCDF_LIBS=-L/usr/local/Cellar/netcdf/4.9.2_1/lib -lnetcdf#" ./config.mk
          sed -i '' "s#.*NETCDFF_FLAGS.*#NETCDFF_FLAGS=-I/usr/local/Cellar/netcdf-fortran/4.6.1/include#" ./config.mk
          sed -i '' "s#.*NETCDFF_LIBS.*#NETCDFF_LIBS=-L/usr/local/Cellar/netcdf-fortran/4.6.1/lib -lnetcdff#" ./config.mk
        fi

    - name: install poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 - --version 1.6.0
        if [ "${{ matrix.os }}" == 'macos-latest' ]; then \
          echo "/Users/runner/.local/bin" >> $GITHUB_PATH
          export PATH="/Users/runner/.local/bin:$PATH"
        fi
        poetry config virtualenvs.create "true"
        poetry config virtualenvs.in-project "true"

    - name: install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        cp .github/workflows/support_ci/pyproject.toml ./Submodules/omuse/
        cp .github/workflows/support_ci/setup.py ./Submodules/omuse/
        poetry install --no-interaction --no-root
        cd ./Submodules/omuse/
        pip install -e .

    - name: install tamspop
      run: poetry install --no-interaction

    - name: build pop workers
      run: |
        cat .github/workflows/support_ci/makefile_help >> ./Submodules/omuse/src/omuse/community/pop/Makefile
        cd ./Submodules/omuse/src/omuse/community/pop
        if [ "${{ matrix.os }}" == 'macos-latest' ]; then \
          sed -i '' "s#.*TARGETS :=.*#TARGETS ?= \$(patsubst src_%, pop_worker_%, \${wildcard src_*})#" Makefile
        fi
        if [ "${{ matrix.os }}" == 'ubuntu-latest' ]; then \
          sed -i "s#.*TARGETS :=.*#TARGETS ?= \$(patsubst src_%, pop_worker_%, \${wildcard src_*})#" Makefile
        fi
        make DOWNLOAD_CODES=1 TARGETS=pop_worker_120x56x12 -j4

    - name: run tamspop tests
      run: poetry run pytest ./tests
